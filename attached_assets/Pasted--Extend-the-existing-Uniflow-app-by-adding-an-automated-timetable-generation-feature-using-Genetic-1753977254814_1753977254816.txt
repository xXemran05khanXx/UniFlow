📌 Extend the existing Uniflow app by adding an automated timetable generation feature using Genetic Algorithm logic, and also include a PDF syllabus extractor for admin convenience.

### ➤ Project Background:
Uniflow is a role-based campus productivity app built with React (frontend), Node.js/Express (backend), and PostgreSQL (database). It already has role-based login (Admin, Teacher, Student) and a full timetable CRUD system.

### ✅ Objective:
Implement a system where:
- Admin selects department, year, and division (e.g., IT - TE - A)
- Uploads a syllabus PDF file (e.g., “IT Sem 7 Syllabus.pdf”)
- The system auto-extracts subjects from the PDF, along with:
  - Subject names
  - Lecture hours per week
  - Theory/Lab categorization

Then the Admin clicks a **“Generate Timetable”** button to:
- Automatically generate a **conflict-free timetable** using a Genetic Algorithm
- Satisfy constraints like:
  - No teacher/classroom clashes
  - Lab sessions get consecutive slots
  - Teachers cannot exceed max weekly load
  - Room types match subject types
  - Teacher availability/unavailability flags are respected

### 🧬 Genetic Algorithm Logic:
- Each candidate solution (chromosome) = 1 possible weekly timetable
- Fitness = How well the schedule satisfies constraints
- Perform selection, crossover, mutation to evolve optimal solution
- Final timetable is inserted into the timetable table in the database

### 🧩 Required Backend Features:
- Upload PDF and extract structured subject data using `pdf-parse` or `pdfjs-dist`
- A POST endpoint `/generate-timetable` that:
  - Accepts department, division, teacher availability, subjects, and room list
  - Runs GA logic to produce optimal timetable
  - Stores results in DB

### 🖥️ Frontend Requirements:
- Admin form: Select Dept + Year + Division + Upload PDF + Generate Timetable
- After generation:
  - Show the final timetable in a weekly grid
  - Option to “Accept & Save” or “Regenerate”

### 🛠️ Tech Stack:
- React.js (frontend)
- Node.js + Express (backend)
- PostgreSQL (already integrated)
- Optional: TailwindCSS (UI), `pdf-parse` for syllabus processing

🎯 The system should be modular so the timetable generation logic can be optimized later.
