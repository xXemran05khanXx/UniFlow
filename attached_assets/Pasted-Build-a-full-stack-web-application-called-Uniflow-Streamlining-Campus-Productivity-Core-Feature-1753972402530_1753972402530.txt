Build a full-stack web application called Uniflow: Streamlining Campus Productivity.

Core Features & Users:

Three User Dashboards:

Admin/HOD/Principal: (Admin portal can be split as per roles)

Create and manage department-wise timetables for the entire college (1st to last year, division-wise).

Book meetings/appointments with multiple selected faculties, viewing real-time dynamic free slots (considering timetables and faculty availability).

Choose free rooms for meetings.

Teachers:

View personalized timetable.

Receive notifications of upcoming classes, with subject and allocated room.

Mark themselves as available or unavailable (flag for scheduling meetings).

Swap or switch lectures with other teachers, with minimal manual effort.

View scheduled meetings requested by HOD/Principal, with reason/details.

Students:

View personalized timetable.

Receive class notifications, including which room and subject.

Get real-time notifications/alerts for class changes.

Functional Constraints & Details:

Timetables must be created per department, covering all years/divisions.

Meeting scheduling system for HOD/Principal to select faculty members and see their free slots (computed from timetable & teacher status), and book available rooms.

Teachersâ€™ "availability" status dynamically affects possible meeting times.

Teachers can view, accept, or decline meeting invites.

Notifications (for classes, room, subject, meetings) are visible on user dashboards.

User-friendly UI, focused on minimizing manual work and confusion.

Scalable structure to allow future feature additions.

Technical Notes:

Use a modern web app stack (Node.js/Express backend, React frontend recommended, or your preferred stack).

Implement secure, role-based login & dashboards.

Store all data in a relational database (e.g., PostgreSQL or MySQL), design schemas for users, timetable, rooms, meetings, notifications, etc.

Design clean, intuitive UI/UX for all three user types.

Project Structure Suggestion:

/backend: API & server logic

models/: Database models (users, timetable, meetings, rooms, notifications)

routes/: Auth, timetable, meetings, notifications, admin, etc.

controllers/

config/

/frontend: React client

components/: Separate folders for Admin, Teacher, Student, Common UI parts

pages/

services/: API calls

utils/

Database schema file

Documentation/readme with setup instructions

Please generate the folder structure, basic files with comments/TODOs, and any initial code stubs setting up login, user models, and dashboard routing, implementing your best practices for scalable web app projects.