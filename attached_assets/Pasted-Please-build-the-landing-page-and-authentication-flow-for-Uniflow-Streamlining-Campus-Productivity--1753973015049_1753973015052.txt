Please build the landing page and authentication flow for Uniflow: Streamlining Campus Productivity as described below:

Landing Page Requirements:

Eye-catching, modern design introducing Uniflow.

Header with website logo/name and a prominent Login button.

Main section with a clear, concise description that highlights key features, such as campus productivity, smart timetable, room allocation, notifications, and meeting management.

Briefly outline the roles (Student, Teacher, Admin) and main benefits for each.

Responsive layout suitable for mobile and desktop.

Accessible & intuitive styling.

Authentication Flow:

When the user clicks Login, present options for Student, Teacher, or Admin login.

Each user type is authenticated securely and redirected to their respective dashboard.

Show different sample dashboard/homepage for each role:

Student: See personalized timetable, real-time class/room/subject notifications, simple navigation.

Teacher: Personalized timetable, notifications for classes and meetings, lecture swap/switch interface, availability flag, dashboard showing meeting invites, etc.

Admin (or HOD/Principal): Dashboard to create/manage timetables and meetings, book rooms, view/manage staff, see requests/notifications.

Technical Structure:

Use a modern frontend (React preferred, or your stack of choice).

Provide sample routing so each user sees their role-specific dashboard after login.

Minimal backend (Node/Express or use mock data) just for login simulation is enough at this stageâ€”but code structure should allow easy backend/API integration later.

Organize with folders for components, pages, and styles, and comment where further development (like API calls) will go.

Deliverables:

/frontend folder with all React files for landing page, login, and three dashboards.

Folder/file structure should include:

components/ (Header, LoginModal, Description, UserDashboard, etc.)

pages/ (LandingPage.jsx, StudentDashboard.jsx, TeacherDashboard.jsx, AdminDashboard.jsx)

App.js or main entry point with role-based routing.

Placeholder user context/auth logic (can be mocked for now).

Clear TODO comments for connecting backend in future.

Make sure UI is user-friendly and role-based flows are clear.

You can use mock user data for now to demonstrate login and dashboard redirection. Please ensure the UI/UX is intuitive, clean, and scalable for future feature additions.